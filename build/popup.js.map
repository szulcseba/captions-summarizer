{"version":3,"file":"popup.js","mappings":";;;;;;;;;;;AAAA;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACNa;;AAEQ;;;AAGrB;AACA;AACA;AACA;AACA,QAAQ,kBAAkB;AAC1B;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC,oBAAoB;AACtD;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,OAAO;AACP,GAAG;AACH,CAAC;;AAED;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA,2BAA2B,MAAM;AACjC;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4BAA4B,mCAAmC;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD,E","sources":["webpack://captions-summarizer/./src/popup.css","webpack://captions-summarizer/webpack/bootstrap","webpack://captions-summarizer/webpack/runtime/make namespace object","webpack://captions-summarizer/./src/popup.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","'use strict';\n\nimport './popup.css';\n\n\n// Restores select box and checkbox state using the preferences\n// stored in chrome.storage.\nfunction restoreOptions() {\n  chrome.storage.sync.get(\n      { openaiApiKey: '' },\n      function(items) {\n          document.getElementById('apiKey').value = items.openaiApiKey;\n          displayMaskedKey(items.openaiApiKey);\n      }\n  );\n}\n\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const summarizeBtn = document.getElementById('summarizeBtn');\n  const summaryDiv = document.getElementById('summary');\n\n  summarizeBtn.addEventListener('click', function() {\n      summarizeBtn.disabled = true;\n      summaryDiv.textContent = 'Summarizing...';\n\n      chrome.runtime.sendMessage({action: \"summarize\"}, function(response) {\n          summarizeBtn.disabled = false;\n          if (response && response.summary) {\n              summaryDiv.textContent = response.summary;\n          } else {\n              summaryDiv.textContent = 'Error: Could not generate summary.';\n          }\n      });\n  });\n});\n\ndocument.querySelector('#go-to-options').addEventListener('click', function() {\n  if (chrome.runtime.openOptionsPage) {\n    chrome.runtime.openOptionsPage();\n  } else {\n    window.open(chrome.runtime.getURL('options.html'));\n  }\n})\n/*\n\n(function () {\n  // We will make use of Storage API to get and store `count` value\n  // More information on Storage API can we found at\n  // https://developer.chrome.com/extensions/storage\n\n  // To get storage access, we have to mention it in `permissions` property of manifest.json file\n  // More information on Permissions can we found at\n  // https://developer.chrome.com/extensions/declare_permissions\n  const counterStorage = {\n    get: (cb) => {\n      chrome.storage.sync.get(['count'], (result) => {\n        cb(result.count);\n      });\n    },\n    set: (value, cb) => {\n      chrome.storage.sync.set(\n        {\n          count: value,\n        },\n        () => {\n          cb();\n        }\n      );\n    },\n  };\n\n  function setupCounter(initialValue = 0) {\n    document.getElementById('counter').innerHTML = initialValue;\n\n    document.getElementById('incrementBtn').addEventListener('click', () => {\n      updateCounter({\n        type: 'INCREMENT',\n      });\n    });\n\n    document.getElementById('decrementBtn').addEventListener('click', () => {\n      updateCounter({\n        type: 'DECREMENT',\n      });\n    });\n  }\n\n  function updateCounter({ type }) {\n    counterStorage.get((count) => {\n      let newCount;\n\n      if (type === 'INCREMENT') {\n        newCount = count + 1;\n      } else if (type === 'DECREMENT') {\n        newCount = count - 1;\n      } else {\n        newCount = count;\n      }\n\n      counterStorage.set(newCount, () => {\n        document.getElementById('counter').innerHTML = newCount;\n\n        // Communicate with content script of\n        // active tab by sending a message\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n          const tab = tabs[0];\n\n          chrome.tabs.sendMessage(\n            tab.id,\n            {\n              type: 'COUNT',\n              payload: {\n                count: newCount,\n              },\n            },\n            (response) => {\n              console.log('Current count value passed to contentScript file');\n            }\n          );\n        });\n      });\n    });\n  }\n\n  function restoreCounter() {\n    // Restore count value\n    counterStorage.get((count) => {\n      if (typeof count === 'undefined') {\n        // Set counter value as 0\n        counterStorage.set(0, () => {\n          setupCounter(0);\n        });\n      } else {\n        setupCounter(count);\n      }\n    });\n  }\n\n  document.addEventListener('DOMContentLoaded', restoreCounter);\n\n  // Communicate with background file by sending a message\n  chrome.runtime.sendMessage(\n    {\n      type: 'GREETINGS',\n      payload: {\n        message: 'Hello, my name is Pop. I am from Popup.',\n      },\n    },\n    (response) => {\n      console.log(response.message);\n    }\n  );\n})();\n*/"],"names":[],"sourceRoot":""}