{"version":3,"file":"contentScript.js","mappings":";;;;;AAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,UAAU;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,sBAAsB;AAC1D;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;;;AAGA;AACA;AACA;AACA,sCAAsC;AACtC,WAAW;AACX;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AAGD;AACA;AACA,uBAAuB,sCAAsC;AAC7D;;AAEA;;AAEA;AACA;AACA,0BAA0B,kBAAkB;AAC5C,SAAS;;;AAGT,KAAK;AACL,kBAAkB;AAClB;AACA,CAAC,E","sources":["webpack://captions-summarizer/./src/contentScript.js"],"sourcesContent":["'use strict';\n\n// Content script file will run in the context of web page.\n// With content script you can manipulate the web pages using\n// Document Object Model (DOM).\n// You can also pass information to the parent extension.\n\n// We execute this script by making an entry in manifest.json file\n// under `content_scripts` property\n\n// For more information on Content Scripts,\n// See https://developer.chrome.com/extensions/content_scripts\n\n// Log `title` of current active web page\n/*\nconst pageTitle = document.head.getElementsByTagName('title')[0].innerHTML;\nconsole.log(\n  `Page title is: '${pageTitle}' - evaluated by Chrome extension's 'contentScript.js' file`\n);\n\n// Communicate with background file by sending a message\nchrome.runtime.sendMessage(\n  {\n    type: 'GREETINGS',\n    payload: {\n      message: 'Hello, my name is Con. I am from ContentScript.',\n    },\n  },\n  (response) => {\n    console.log(response.message);\n  }\n);\n\n// Listen for message\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.type === 'COUNT') {\n    console.log(`Current count is ${request.payload.count}`);\n  }\n\n  // Send an empty response\n  // See https://github.com/mozilla/webextension-polyfill/issues/130#issuecomment-531531890\n  sendResponse({});\n  return true;\n});\n*/\n\n/*\nvar s = document.createElement('script');\ns.src = chrome.runtime.getURL('contentScript.js');\ns.onload = function() { this.remove(); }; */\n// see also \"Dynamic values in the injected code\" section in this answer\n(document.head || document.documentElement).appendChild(s);\n\n\nfunction getVideo() {\n  const title = document.querySelector('h1.title').textContent;\n  const description = document.querySelector('#description-text').textContent;\n  const transcript = getTranscript(); // You'll need to implement this function\n  return { title, description, transcript };\n}\n\nfunction getTranscript() {\n  // This is a placeholder. Implementing transcript extraction is complex and depends on YouTube's structure\n  // You might need to use YouTube's API or parse the page HTML\n  return \"Placeholder for video transcript\";\n}\n\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === \"getVideoDetails\") {\n    const details = getVideo();\n    sendResponse(details);\n  }\n});\n\n\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === \"summarize\") {\n    chrome.tabs.query({active: true, lastFocusedWindow: true}, tabs => {\n        let url = tabs[0].url;\n\n        let slug = getParam('v', url);\n\n        summarizeVideo(slug).then((response) => {\n            console.log(\"success\");\n            sendResponse({summary: response});\n        });\n\n\n    });\n    return true;  // Indicates we will send a response asynchronously\n  }\n});"],"names":[],"sourceRoot":""}